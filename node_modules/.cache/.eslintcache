[{"/home/ismailyh/Desktop/project/typing-test/src/index.tsx":"1","/home/ismailyh/Desktop/project/typing-test/src/store/store.ts":"2","/home/ismailyh/Desktop/project/typing-test/src/App.tsx":"3","/home/ismailyh/Desktop/project/typing-test/src/store/reducer.ts":"4","/home/ismailyh/Desktop/project/typing-test/src/store/actions.ts":"5","/home/ismailyh/Desktop/project/typing-test/src/helpers/recordTest.ts":"6","/home/ismailyh/Desktop/project/typing-test/src/components/Result.tsx":"7","/home/ismailyh/Desktop/project/typing-test/src/components/Footer.tsx":"8","/home/ismailyh/Desktop/project/typing-test/src/components/Header.tsx":"9","/home/ismailyh/Desktop/project/typing-test/src/components/Test.tsx":"10","/home/ismailyh/Desktop/project/typing-test/src/components/CommandPallet.tsx":"11","/home/ismailyh/Desktop/project/typing-test/src/helpers/resetTest.ts":"12","/home/ismailyh/Desktop/project/typing-test/src/helpers/startTimer.ts":"13"},{"size":362,"mtime":1664874549075,"results":"14","hashOfConfig":"15"},{"size":220,"mtime":1665351344658,"results":"16","hashOfConfig":"15"},{"size":2455,"mtime":1665643715233,"results":"17","hashOfConfig":"15"},{"size":3987,"mtime":1665441739300,"results":"18","hashOfConfig":"15"},{"size":1802,"mtime":1665356764990,"results":"19","hashOfConfig":"15"},{"size":2660,"mtime":1665609302837,"results":"20","hashOfConfig":"15"},{"size":1611,"mtime":1665642271871,"results":"21","hashOfConfig":"15"},{"size":3682,"mtime":1664874549075,"results":"22","hashOfConfig":"15"},{"size":4446,"mtime":1665642861575,"results":"23","hashOfConfig":"15"},{"size":3093,"mtime":1665605339788,"results":"24","hashOfConfig":"15"},{"size":3854,"mtime":1664874549075,"results":"25","hashOfConfig":"15"},{"size":645,"mtime":1664874549075,"results":"26","hashOfConfig":"15"},{"size":292,"mtime":1664874549075,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"myax5n",{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ismailyh/Desktop/project/typing-test/src/index.tsx",[],"/home/ismailyh/Desktop/project/typing-test/src/store/store.ts",[],"/home/ismailyh/Desktop/project/typing-test/src/App.tsx",["55"],"import { useEffect, useState , useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Header from \"components/Header\";\nimport Test from \"components/Test\";\nimport Result from \"components/Result\";\nimport Footer from \"components/Footer\";\n\n//import CommandPallet from \"components/CommandPallet\";\n\nimport { State } from \"store/reducer\";\nimport { setTimerId } from \"store/actions\";\n\nimport { recordTest } from \"helpers/recordTest\";\n\nimport \"stylesheets/themes.scss\";\n\n\n\nexport default function App() {\n    const {\n        time: { timerId, timer },\n        word: { currWord, typedWord, activeWordRef },\n    } = useSelector((state: State) => state);\n    const dispatch = useDispatch();\n\n    const rendercount = useRef(1);\n\n    useEffect(() => {\n        document.onkeydown = (e) => {\n            console.log(\"use effect in app 1\")\n            if (e.key.length === 1 || e.key === \"Backspace\" || e.key === \"Tab\") {\n                recordTest(e.key, e.ctrlKey);\n                e.preventDefault();\n            }\n        };\n        return () => {\n            document.onkeydown = null;\n        };\n    }, [dispatch]);\n\n\n    // ca compare lettre par lettre du currWord et du typedWord\n    useEffect(() => {\n        let idx = typedWord.length - 1;\n        const currWordEl = activeWordRef?.current!;\n        if (currWordEl) {\n            currWordEl.children[idx + 1].classList.add(\n                currWord[idx] !== typedWord[idx] ? \"wrong\" : \"right\"\n            );\n        }\n    }, [currWord, typedWord, activeWordRef]);\n\n\n    //pas bien saisi l'interet \n    useEffect(() => {\n        let idx = typedWord.length;\n        const currWordEl = activeWordRef?.current!;\n        if (currWordEl && idx < currWord.length)\n            currWordEl.children[idx + 1].classList.remove(\"wrong\", \"right\");\n    }, [currWord.length, typedWord, activeWordRef]);\n\n    //used for removing the intervall that decreses the timer , it will be removed when timer = 0 so we don't get negative values\n    useEffect(() => {\n        if (!timer && timerId) {\n            clearInterval(timerId);\n            dispatch(setTimerId(null));\n        }\n    }, [dispatch, timer, timerId]);\n\n    useEffect(() => {\n        rendercount.current = rendercount.current + 1;\n    })\n\n\n    return (\n        <>\n            <Header />\n            {timer ? <Test /> : <Result />}\n            {console.log(`app rendered ${rendercount.current}`)}\n            <Footer />\n        </>\n    );\n}","/home/ismailyh/Desktop/project/typing-test/src/store/reducer.ts",[],"/home/ismailyh/Desktop/project/typing-test/src/store/actions.ts",[],"/home/ismailyh/Desktop/project/typing-test/src/helpers/recordTest.ts",[],"/home/ismailyh/Desktop/project/typing-test/src/components/Result.tsx",[],"/home/ismailyh/Desktop/project/typing-test/src/components/Footer.tsx",[],"/home/ismailyh/Desktop/project/typing-test/src/components/Header.tsx",["56","57","58","59"],"/home/ismailyh/Desktop/project/typing-test/src/components/Test.tsx",[],"/home/ismailyh/Desktop/project/typing-test/src/components/CommandPallet.tsx",[],"/home/ismailyh/Desktop/project/typing-test/src/helpers/resetTest.ts",[],"/home/ismailyh/Desktop/project/typing-test/src/helpers/startTimer.ts",[],{"ruleId":"60","severity":1,"message":"61","line":1,"column":21,"nodeType":"62","messageId":"63","endLine":1,"endColumn":29},{"ruleId":"60","severity":1,"message":"61","line":2,"column":21,"nodeType":"62","messageId":"63","endLine":2,"endColumn":29},{"ruleId":"60","severity":1,"message":"64","line":5,"column":5,"nodeType":"62","messageId":"63","endLine":5,"endColumn":13},{"ruleId":"60","severity":1,"message":"65","line":20,"column":11,"nodeType":"62","messageId":"63","endLine":20,"endColumn":25},{"ruleId":"60","severity":1,"message":"66","line":43,"column":15,"nodeType":"62","messageId":"63","endLine":43,"endColumn":20},"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'setTheme' is defined but never used.","'AnimationProps' is defined but never used.","'theme' is assigned a value but never used."]