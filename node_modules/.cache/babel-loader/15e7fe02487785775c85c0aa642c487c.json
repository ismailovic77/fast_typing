{"ast":null,"code":"import { appendTypedHistory, backtrackWord, setChar, setTypedWord } from \"store/actions\";\nimport { store } from \"store/store\";\nimport { resetTest } from \"./resetTest\";\nimport { startTimer } from \"./startTimer\";\n\nconst handleBackspace = ctrlKey => {\n  const {\n    dispatch,\n    getState\n  } = store;\n  const {\n    word: {\n      typedWord,\n      activeWordRef,\n      typedHistory,\n      wordList\n    }\n  } = getState();\n  const currIdx = typedHistory.length - 1;\n  const currWordEl = activeWordRef === null || activeWordRef === void 0 ? void 0 : activeWordRef.current;\n\n  if (!typedWord && typedHistory[currIdx] !== wordList[currIdx]) {\n    dispatch(backtrackWord(ctrlKey));\n    currWordEl.previousElementSibling.classList.remove(\"right\", \"wrong\");\n\n    if (ctrlKey) {\n      currWordEl.previousElementSibling.childNodes.forEach(char => {\n        char.classList.remove(\"wrong\", \"right\");\n      });\n    }\n  } else {\n    if (ctrlKey) {\n      dispatch(setTypedWord(\"\"));\n      currWordEl.childNodes.forEach(char => {\n        char.classList.remove(\"wrong\", \"right\");\n      });\n    } else {\n      const newTypedWord = typedWord.slice(0, typedWord.length - 1);\n      dispatch(setTypedWord(newTypedWord));\n    }\n  }\n};\n\nexport const recordTest = (key, ctrlKey) => {\n  const {\n    dispatch,\n    getState\n  } = store;\n  const {\n    time: {\n      timer,\n      timerId\n    },\n    word: {\n      typedWord,\n      currWord,\n      activeWordRef,\n      caretRef\n    },\n    preferences: {\n      timeLimit\n    }\n  } = getState();\n\n  if (!timer) {\n    if (key === \"Tab\") {\n      resetTest();\n    }\n\n    return;\n  }\n\n  if (!timerId && key !== \"Tab\") {\n    console.log(\"logging before startting time\");\n    startTimer();\n  }\n\n  const currWordEl = activeWordRef === null || activeWordRef === void 0 ? void 0 : activeWordRef.current;\n  currWordEl.scrollIntoView({\n    behavior: \"smooth\",\n    block: \"center\"\n  });\n  const caret = caretRef === null || caretRef === void 0 ? void 0 : caretRef.current;\n  caret.classList.remove(\"blink\");\n  setTimeout(() => caret.classList.add(\"blink\"), 500);\n\n  switch (key) {\n    case \"Tab\":\n      if (timer !== timeLimit || timerId) {\n        resetTest();\n        document.getElementsByClassName(\"word\")[0].scrollIntoView();\n      }\n\n      break;\n\n    case \" \":\n      if (typedWord === \"\") return;\n      currWordEl.classList.add(typedWord !== currWord ? \"wrong\" : \"right\");\n      dispatch(appendTypedHistory());\n      break;\n\n    case \"Backspace\":\n      handleBackspace(ctrlKey);\n      break;\n\n    default:\n      dispatch(setChar(typedWord + key));\n      break;\n  }\n};","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/typing-test/src/helpers/recordTest.ts"],"names":["appendTypedHistory","backtrackWord","setChar","setTypedWord","store","resetTest","startTimer","handleBackspace","ctrlKey","dispatch","getState","word","typedWord","activeWordRef","typedHistory","wordList","currIdx","length","currWordEl","current","previousElementSibling","classList","remove","childNodes","forEach","char","newTypedWord","slice","recordTest","key","time","timer","timerId","currWord","caretRef","preferences","timeLimit","console","log","scrollIntoView","behavior","block","caret","setTimeout","add","document","getElementsByClassName"],"mappings":"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","sourcesContent":["import {\n    appendTypedHistory,\n    backtrackWord,\n    setChar,\n    setTypedWord,\n} from \"store/actions\";\nimport { store } from \"store/store\";\nimport { resetTest } from \"./resetTest\";\nimport { startTimer } from \"./startTimer\";\n\nconst handleBackspace = (ctrlKey: boolean) => {\n    const { dispatch, getState } = store;\n    const {\n        word: { typedWord, activeWordRef, typedHistory, wordList },\n    } = getState();\n    const currIdx = typedHistory.length - 1;\n    const currWordEl = activeWordRef?.current!;\n    if (!typedWord && typedHistory[currIdx] !== wordList[currIdx]) {\n        dispatch(backtrackWord(ctrlKey));\n        currWordEl.previousElementSibling!.classList.remove(\"right\", \"wrong\");\n        if (ctrlKey) {\n            currWordEl.previousElementSibling!.childNodes.forEach(\n                (char: HTMLSpanElement) => {\n                    char.classList.remove(\"wrong\", \"right\");\n                }\n            );\n        }\n    } else {\n        if (ctrlKey) {\n            dispatch(setTypedWord(\"\"));\n            currWordEl.childNodes.forEach((char: HTMLSpanElement) => {\n                char.classList.remove(\"wrong\", \"right\");\n            });\n        } else {\n            const newTypedWord = typedWord.slice(0, typedWord.length - 1);\n            dispatch(setTypedWord(newTypedWord));\n        }\n    }\n};\n\nexport const recordTest = (key: string, ctrlKey: boolean) => {\n    const { dispatch, getState } = store;\n    const {\n        time: { timer, timerId },\n        word: { typedWord, currWord, activeWordRef, caretRef },\n        preferences: { timeLimit },\n    } = getState();\n\n    if (!timer) {\n        if (key === \"Tab\") {\n            resetTest();\n        }\n        return;\n    }\n    if (!timerId && key !== \"Tab\") {\n        console.log(\"logging before startting time\")\n        startTimer();\n\n    }\n    const currWordEl = activeWordRef?.current!;\n    currWordEl.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n    const caret = caretRef?.current!;\n    caret.classList.remove(\"blink\");\n    setTimeout(() => caret.classList.add(\"blink\"), 500);\n    switch (key) {\n        case \"Tab\":\n            if (timer !== timeLimit || timerId) {\n                resetTest();\n                document.getElementsByClassName(\"word\")[0].scrollIntoView();\n            }\n            break;\n        case \" \":\n            if (typedWord === \"\") return;\n            currWordEl.classList.add(\n                typedWord !== currWord ? \"wrong\" : \"right\"\n            );\n            dispatch(appendTypedHistory());\n            break;\n        case \"Backspace\":\n            handleBackspace(ctrlKey);\n            break;\n        default:\n            dispatch(setChar(typedWord + key));\n            break;\n    }\n};\n"]},"metadata":{},"sourceType":"module"}