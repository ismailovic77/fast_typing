{"ast":null,"code":"var _jsxFileName = \"/home/ismailyh/Desktop/project/typing-test/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Header from \"components/Header\";\nimport Test from \"components/Test\";\nimport Result from \"components/Result\";\nimport { setTimerId } from \"store/actions\";\nimport { recordTest } from \"helpers/recordTest\";\nimport \"stylesheets/themes.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const {\n    time: {\n      timerId,\n      timer\n    },\n    word: {\n      currWord,\n      typedWord,\n      activeWordRef\n    }\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const rendercount = useRef(1);\n  useEffect(() => {\n    document.onkeydown = e => {\n      console.log(\"use effect in app 1\");\n\n      if (e.key.length === 1 || e.key === \"Backspace\" || e.key === \"Tab\") {\n        recordTest(e.key, e.ctrlKey);\n        e.preventDefault();\n      }\n    };\n\n    return () => {\n      document.onkeydown = null;\n    };\n  }, [dispatch]); // ca compare lettre par lettre du currWord et du typedWord\n\n  useEffect(() => {\n    let idx = typedWord.length - 1;\n    const currWordEl = activeWordRef === null || activeWordRef === void 0 ? void 0 : activeWordRef.current;\n\n    if (currWordEl) {\n      currWordEl.children[idx + 1].classList.add(currWord[idx] !== typedWord[idx] ? \"wrong\" : \"right\");\n    }\n  }, [currWord, typedWord, activeWordRef]); //pas bien saisi l'interet \n\n  useEffect(() => {\n    let idx = typedWord.length;\n    const currWordEl = activeWordRef === null || activeWordRef === void 0 ? void 0 : activeWordRef.current;\n    if (currWordEl && idx < currWord.length) currWordEl.children[idx + 1].classList.remove(\"wrong\", \"right\");\n  }, [currWord.length, typedWord, activeWordRef]); //used for removing the intervall that decreses the timer , it will be removed when timer = 0 so we don't get negative values\n\n  useEffect(() => {\n    if (!timer && timerId) {\n      clearInterval(timerId);\n      dispatch(setTimerId(null));\n    }\n  }, [dispatch, timer, timerId]);\n  useEffect(() => {\n    rendercount.current = rendercount.current + 1;\n  });\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), timer ? /*#__PURE__*/_jsxDEV(Test, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(Result, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }, this), console.log(`app rendered ${rendercount.current}`), /*#__PURE__*/_jsxDEV(\"footer\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"/Ye2FPV1zucStvfxNVH6uHArwPU=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/typing-test/src/App.tsx"],"names":["useEffect","useRef","useDispatch","useSelector","Header","Test","Result","setTimerId","recordTest","App","time","timerId","timer","word","currWord","typedWord","activeWordRef","state","dispatch","rendercount","document","onkeydown","e","console","log","key","length","ctrlKey","preventDefault","idx","currWordEl","current","children","classList","add","remove","clearInterval"],"mappings":"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","sourcesContent":["import { useEffect, useState , useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport Header from \"components/Header\";\nimport Test from \"components/Test\";\nimport Result from \"components/Result\";\nimport Footer from \"components/Footer\";\n\n//import CommandPallet from \"components/CommandPallet\";\n\nimport { State } from \"store/reducer\";\nimport { setTimerId } from \"store/actions\";\n\nimport { recordTest } from \"helpers/recordTest\";\n\nimport \"stylesheets/themes.scss\";\n\n\n\nexport default function App() {\n    const {\n        time: { timerId, timer },\n        word: { currWord, typedWord, activeWordRef },\n    } = useSelector((state: State) => state);\n    const dispatch = useDispatch();\n\n    const rendercount = useRef(1);\n\n    useEffect(() => {\n        document.onkeydown = (e) => {\n            console.log(\"use effect in app 1\")\n            if (e.key.length === 1 || e.key === \"Backspace\" || e.key === \"Tab\") {\n                recordTest(e.key, e.ctrlKey);\n                e.preventDefault();\n            }\n        };\n        return () => {\n            document.onkeydown = null;\n        };\n    }, [dispatch]);\n\n\n    // ca compare lettre par lettre du currWord et du typedWord\n    useEffect(() => {\n        let idx = typedWord.length - 1;\n        const currWordEl = activeWordRef?.current!;\n        if (currWordEl) {\n            currWordEl.children[idx + 1].classList.add(\n                currWord[idx] !== typedWord[idx] ? \"wrong\" : \"right\"\n            );\n        }\n    }, [currWord, typedWord, activeWordRef]);\n\n\n    //pas bien saisi l'interet \n    useEffect(() => {\n        let idx = typedWord.length;\n        const currWordEl = activeWordRef?.current!;\n        if (currWordEl && idx < currWord.length)\n            currWordEl.children[idx + 1].classList.remove(\"wrong\", \"right\");\n    }, [currWord.length, typedWord, activeWordRef]);\n\n    //used for removing the intervall that decreses the timer , it will be removed when timer = 0 so we don't get negative values\n    useEffect(() => {\n        if (!timer && timerId) {\n            clearInterval(timerId);\n            dispatch(setTimerId(null));\n        }\n    }, [dispatch, timer, timerId]);\n\n    useEffect(() => {\n        rendercount.current = rendercount.current + 1;\n    })\n\n\n    return (\n        <>\n            <Header />\n            {timer ? <Test /> : <Result />}\n            {console.log(`app rendered ${rendercount.current}`)}\n            <footer />\n        </>\n    );\n}"]},"metadata":{},"sourceType":"module"}