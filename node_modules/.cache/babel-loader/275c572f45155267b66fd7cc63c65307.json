{"ast":null,"code":"import { combineReducers } from \"redux\";\nimport { SET_CHAR, SET_WORD, TIMER_DECeREMENT, TIMERID_SET, TIMER_SET, APPEND_TYPED_HISTORY, PREV_WORD, SET_WORDLIST, SET_THEME, SET_TIME, SET_REF, SET_CARET_REF, SET_TYPE } from \"./actions\";\nexport const initialState = {\n  preferences: {\n    theme: \"\",\n    timeLimit: 0,\n    type: \"\"\n  },\n  word: {\n    currWord: \"\",\n    typedWord: \"\",\n    typedHistory: [],\n    wordList: [],\n    activeWordRef: null,\n    caretRef: null\n  },\n  time: {\n    timer: 1,\n    timerId: null\n  }\n};\n\nconst timerReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.time;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case TIMER_DECeREMENT:\n      return { ...state,\n        timer: state.timer - 1\n      };\n\n    case TIMER_SET:\n      return { ...state,\n        timer: payload\n      };\n\n    case TIMERID_SET:\n      return { ...state,\n        timerId: payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst wordReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.word;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case SET_CHAR:\n      return { ...state,\n        typedWord: payload\n      };\n\n    case SET_WORD:\n      return { ...state,\n        typedHistory: [...state.typedHistory, payload]\n      };\n\n    case APPEND_TYPED_HISTORY:\n      const nextIdx = state.typedHistory.length + 1;\n      return { ...state,\n        typedWord: \"\",\n        currWord: state.wordList[nextIdx],\n        typedHistory: [...state.typedHistory, state.typedWord]\n      };\n\n    case PREV_WORD:\n      const prevIdx = state.typedHistory.length - 1;\n      return { ...state,\n        currWord: state.wordList[prevIdx],\n        typedWord: !payload ? state.typedHistory[prevIdx] : \"\",\n        typedHistory: state.typedHistory.splice(0, prevIdx)\n      };\n\n    case SET_REF:\n      return { ...state,\n        activeWordRef: payload\n      };\n\n    case SET_CARET_REF:\n      return { ...state,\n        caretRef: payload\n      };\n\n    case SET_WORDLIST:\n      const areNotWords = payload.some(word => word.includes(\" \"));\n      var shuffledWordList = payload.sort(() => Math.random() - 0.5);\n      if (areNotWords) shuffledWordList = payload.flatMap(token => token.split(\" \"));\n      return { ...state,\n        typedWord: \"\",\n        typedHistory: [],\n        currWord: shuffledWordList[0],\n        wordList: shuffledWordList\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst preferenceReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState.preferences;\n  let {\n    type,\n    payload\n  } = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (type) {\n    case SET_THEME:\n      return { ...state,\n        theme: payload\n      };\n\n    case SET_TIME:\n      return { ...state,\n        timeLimit: payload\n      };\n\n    case SET_TYPE:\n      return { ...state,\n        type: payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  time: timerReducer,\n  word: wordReducer,\n  preferences: preferenceReducer\n});","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/typing-test/src/store/reducer.ts"],"names":["combineReducers","SET_CHAR","SET_WORD","TIMER_DECeREMENT","TIMERID_SET","TIMER_SET","APPEND_TYPED_HISTORY","PREV_WORD","SET_WORDLIST","SET_THEME","SET_TIME","SET_REF","SET_CARET_REF","SET_TYPE","initialState","preferences","theme","timeLimit","type","word","currWord","typedWord","typedHistory","wordList","activeWordRef","caretRef","time","timer","timerId","timerReducer","state","payload","wordReducer","nextIdx","length","prevIdx","splice","areNotWords","some","includes","shuffledWordList","sort","Math","random","flatMap","token","split","preferenceReducer"],"mappings":"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","sourcesContent":["import { RefObject } from \"react\";\nimport { AnyAction, combineReducers } from \"redux\";\nimport {\n    SET_CHAR,\n    SET_WORD,\n    TIMER_DECeREMENT,\n    TIMERID_SET,\n    TIMER_SET,\n    APPEND_TYPED_HISTORY,\n    PREV_WORD,\n    SET_WORDLIST,\n    SET_THEME,\n    SET_TIME,\n    SET_REF,\n    SET_CARET_REF,\n    SET_TYPE,\n} from \"./actions\";\n\nexport interface State {\n    preferences: {\n        theme: string;\n        timeLimit: number;\n        type: string;\n    };\n    word: {\n        currWord: string;\n        typedWord: string;\n        typedHistory: string[];\n        wordList: string[];\n        activeWordRef: RefObject<HTMLDivElement> | null;\n        caretRef: RefObject<HTMLSpanElement> | null;\n    };\n    time: {\n        timer: number;\n        timerId: NodeJS.Timeout | null;\n    };\n}\n\nexport const initialState: State = {\n    preferences: {\n        theme: \"\",\n        timeLimit: 0,\n        type: \"\",\n    },\n    word: {\n        currWord: \"\",\n        typedWord: \"\",\n        typedHistory: [],\n        wordList: [],\n        activeWordRef: null,\n        caretRef: null,\n    },\n    time: {\n        timer: 1,\n        timerId: null,\n    },\n};\n\nconst timerReducer = (state = initialState.time, { type, payload }: AnyAction ) => {\n    switch (type) {\n        case TIMER_DECeREMENT:\n            return { ...state, timer: state.timer - 1 };\n        case TIMER_SET:\n            return { ...state, timer: payload };\n        case TIMERID_SET:\n            return { ...state, timerId: payload };\n        default:\n            return state;\n    }\n};\n\nconst wordReducer = (state = initialState.word,{ type, payload }: AnyAction) => {\n    switch (type) {\n        case SET_CHAR:\n            return { ...state, typedWord: payload };\n        case SET_WORD:\n            return { ...state, typedHistory: [...state.typedHistory, payload] };\n        case APPEND_TYPED_HISTORY:\n            const nextIdx = state.typedHistory.length + 1;\n            return {\n                ...state,\n                typedWord: \"\",\n                currWord: state.wordList[nextIdx],\n                typedHistory: [...state.typedHistory, state.typedWord],\n            };\n        case PREV_WORD:\n            const prevIdx = state.typedHistory.length - 1;\n            return {\n                ...state,\n                currWord: state.wordList[prevIdx],\n                typedWord: !payload ? state.typedHistory[prevIdx] : \"\",\n                typedHistory: state.typedHistory.splice(0, prevIdx),\n            };\n        case SET_REF:\n            return {\n                ...state,\n                activeWordRef: payload,\n            };\n        case SET_CARET_REF:\n            return {\n                ...state,\n                caretRef: payload,\n            };\n        case SET_WORDLIST:\n            const areNotWords = payload.some((word: string) =>\n                word.includes(\" \")\n            );\n            var shuffledWordList: string[] = payload.sort(\n                () => Math.random() - 0.5\n            );\n            if (areNotWords)\n                shuffledWordList = payload.flatMap((token: string) =>\n                    token.split(\" \")\n                );\n            return {\n                ...state,\n                typedWord: \"\",\n                typedHistory: [],\n                currWord: shuffledWordList[0],\n                wordList: shuffledWordList,\n            };\n        default:\n            return state;\n    }\n};\n\nconst preferenceReducer = (state = initialState.preferences, { type, payload }: AnyAction) => {\n    switch (type) {\n        case SET_THEME:\n            return { ...state, theme: payload };\n        case SET_TIME:\n            return {\n                ...state,\n                timeLimit: payload,\n            };\n        case SET_TYPE:\n            return {\n                ...state,\n                type: payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport default combineReducers({\n    time: timerReducer,\n    word: wordReducer,\n    preferences: preferenceReducer,\n});\n"]},"metadata":{},"sourceType":"module"}