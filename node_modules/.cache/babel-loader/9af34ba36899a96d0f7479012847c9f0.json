{"ast":null,"code":"var _jsxFileName = \"/home/ismailyh/Desktop/project/typing-test/src/components/Header.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setTheme, setTime, setType, setWordList, timerSet } from \"store/actions\";\nimport \"stylesheets/Header.scss\";\nimport \"stylesheets/AnimatedTheme.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const options = {\n  time: [15, 30, 45, 60, 120],\n  theme: [\"default\", \"mkbhd\", \"mocha\", \"coral\", \"ocean\", \"azure\", \"forest\", \"rose-milk\", \"amethyst\"],\n  type: [\"words\", \"sentences\", \"numbers\"]\n};\nexport default function Header() {\n  _s();\n\n  const {\n    preferences: {\n      timeLimit,\n      theme,\n      type\n    },\n    time: {\n      timerId\n    }\n  } = useSelector(state => state);\n  const [animationProps, setAnimationProps] = useState();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const theme = localStorage.getItem(\"theme\") || \"default\";\n    const type = localStorage.getItem(\"type\") || \"words\";\n    const time = parseInt(localStorage.getItem(\"time\") || \"30\", 10);\n    import(`wordlists/${type}.json`).then(words => {\n      dispatch(setWordList(words.default));\n    });\n    dispatch(timerSet(time));\n    dispatch(setType(type));\n    dispatch(setTime(time));\n    dispatch(setTheme(theme));\n  }, [dispatch]);\n  /*\n  // Set Theme\n  useEffect(() => {\n      if (theme) {\n          document.querySelector(\".theme\")?.childNodes.forEach((el) => {\n              if (el instanceof HTMLButtonElement)\n                  el.classList.remove(\"selected\");\n          });\n          document\n              .querySelector(`button[value=\"${theme}\"]`)\n              ?.classList.add(\"selected\");\n          document.body.children[1].classList.remove(...options.theme);\n          document.body.children[1].classList.add(theme);\n          localStorage.setItem(\"theme\", theme);\n      }\n  }, [dispatch, theme]);\n   \n  // Set Time\n  useEffect(() => {\n      if (timeLimit !== 0) {\n          document.querySelector(\".time\")?.childNodes.forEach((el) => {\n              if (el instanceof HTMLButtonElement)\n                  el.classList.remove(\"selected\");\n          });\n          document\n              .querySelector(`button[value=\"${timeLimit}\"]`)\n              ?.classList.add(\"selected\");\n          dispatch(setTime(timeLimit));\n          localStorage.setItem(\"time\", `${timeLimit}`);\n          resetTest();\n      }\n  }, [dispatch, timeLimit]);\n   // Set Type\n  useEffect(() => {\n      if (type !== \"\") {\n          document.querySelector(\".type\")?.childNodes.forEach((el) => {\n              if (el instanceof HTMLButtonElement)\n                  el.classList.remove(\"selected\");\n          });\n          document\n              .querySelector(`button[value=\"${type}\"]`)\n              ?.classList.add(\"selected\");\n          dispatch(setType(type));\n          localStorage.setItem(\"type\", type);\n          resetTest();\n      }\n  }, [dispatch, type]);\n    */\n\n  const handleOptions = _ref => {\n    let {\n      target,\n      clientX,\n      clientY\n    } = _ref;\n\n    if (target instanceof HTMLButtonElement && target.dataset.option) {\n      if (target.value === theme || +target.value === timeLimit) {\n        target.blur();\n        return;\n      }\n\n      switch (target.dataset.option) {\n        case \"theme\":\n          setTimeout(() => {\n            dispatch(setTheme(target.value));\n          }, 750);\n          setAnimationProps({\n            top: clientY,\n            left: clientX,\n            theme: target.value\n          });\n          break;\n\n        case \"time\":\n          dispatch(setTime(+target.value));\n          break;\n\n        case \"type\":\n          dispatch(setType(target.value));\n          break;\n      }\n\n      target.blur();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"header\", {\n    className: timerId ? \"hidden\" : undefined,\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \".\",\n      className: \"brand\",\n      children: \"typing-test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: Object.entries(options).map(_ref2 => {\n        let [option, choices] = _ref2;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: option,\n          children: [option, \":\", choices.map(choice => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"mini\",\n            \"data-option\": option,\n            value: choice,\n            onClick: e => handleOptions(e),\n            children: choice\n          }, choice, false, {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 29\n          }, this))]\n        }, option, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n}\n/*\n\n{animationProps ? (\n    <div\n        className={`animated-theme ${animationProps.theme}`}\n        style={{\n            top: animationProps.top,\n            left: animationProps.left,\n        }}\n        onAnimationEnd={() => setAnimationProps(null)}></div>\n) : null}\n*/\n\n_s(Header, \"243OaOka1SHCUnRrXtmBmVBPh4U=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/typing-test/src/components/Header.tsx"],"names":["useEffect","useState","useDispatch","useSelector","setTheme","setTime","setType","setWordList","timerSet","options","time","theme","type","Header","preferences","timeLimit","timerId","state","animationProps","setAnimationProps","dispatch","localStorage","getItem","parseInt","then","words","default","handleOptions","target","clientX","clientY","HTMLButtonElement","dataset","option","value","blur","setTimeout","top","left","undefined","Object","entries","map","choices","choice","e"],"mappings":"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","sourcesContent":["import { resetTest } from \"helpers/resetTest\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n    setTheme,\n    setTime,\n    setType,\n    setWordList,\n    timerSet,\n} from \"store/actions\";\nimport { State } from \"store/reducer\";\nimport \"stylesheets/Header.scss\";\nimport \"stylesheets/AnimatedTheme.scss\";\n\nexport interface Options {\n    time: number[];\n    theme: string[];\n    type: string[];\n}\n\ninterface AnimationProps {\n    top: number;\n    left: number;\n    theme: string;\n}\n\nexport const options: Options = {\n    time: [15, 30, 45, 60, 120],\n    theme: [\n        \"default\",\n        \"mkbhd\",\n        \"mocha\",\n        \"coral\",\n        \"ocean\",\n        \"azure\",\n        \"forest\",\n        \"rose-milk\",\n        \"amethyst\",\n    ],\n    type: [\"words\", \"sentences\", \"numbers\"],\n};\n\nexport default function Header() {\n    const {\n        preferences: { timeLimit, theme, type },\n        time: { timerId },\n    } = useSelector((state: State) => state);\n    const [animationProps, setAnimationProps] = useState<AnimationProps | null>();\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        const theme = localStorage.getItem(\"theme\") || \"default\";\n        const type = localStorage.getItem(\"type\") || \"words\";\n        const time = parseInt(localStorage.getItem(\"time\") || \"30\", 10);\n        import(`wordlists/${type}.json`).then((words) => {\n            dispatch(setWordList(words.default));\n        });\n\n        dispatch(timerSet(time));\n        dispatch(setType(type));\n        dispatch(setTime(time));\n        dispatch(setTheme(theme));\n    }, [dispatch]);\n\n    /*\n    // Set Theme\n    useEffect(() => {\n        if (theme) {\n            document.querySelector(\".theme\")?.childNodes.forEach((el) => {\n                if (el instanceof HTMLButtonElement)\n                    el.classList.remove(\"selected\");\n            });\n            document\n                .querySelector(`button[value=\"${theme}\"]`)\n                ?.classList.add(\"selected\");\n            document.body.children[1].classList.remove(...options.theme);\n            document.body.children[1].classList.add(theme);\n            localStorage.setItem(\"theme\", theme);\n        }\n    }, [dispatch, theme]);\n\n\n   \n    // Set Time\n    useEffect(() => {\n        if (timeLimit !== 0) {\n            document.querySelector(\".time\")?.childNodes.forEach((el) => {\n                if (el instanceof HTMLButtonElement)\n                    el.classList.remove(\"selected\");\n            });\n            document\n                .querySelector(`button[value=\"${timeLimit}\"]`)\n                ?.classList.add(\"selected\");\n            dispatch(setTime(timeLimit));\n            localStorage.setItem(\"time\", `${timeLimit}`);\n            resetTest();\n        }\n    }, [dispatch, timeLimit]);\n\n    // Set Type\n    useEffect(() => {\n        if (type !== \"\") {\n            document.querySelector(\".type\")?.childNodes.forEach((el) => {\n                if (el instanceof HTMLButtonElement)\n                    el.classList.remove(\"selected\");\n            });\n            document\n                .querySelector(`button[value=\"${type}\"]`)\n                ?.classList.add(\"selected\");\n            dispatch(setType(type));\n            localStorage.setItem(\"type\", type);\n            resetTest();\n        }\n    }, [dispatch, type]);\n\n     */\n\n    const handleOptions = ({ target, clientX, clientY }: React.MouseEvent) => {\n        if (target instanceof HTMLButtonElement && target.dataset.option) {\n            if (target.value === theme || +target.value === timeLimit) {\n                target.blur();\n                return;\n            }\n            switch (target.dataset.option) {\n                case \"theme\":\n                    setTimeout(() => {\n                        dispatch(setTheme(target.value));\n                    }, 750);\n                    setAnimationProps({\n                        top: clientY,\n                        left: clientX,\n                        theme: target.value,\n                    });\n                    break;\n                case \"time\":\n                    dispatch(setTime(+target.value));\n                    break;\n                case \"type\":\n                    dispatch(setType(target.value));\n                    break;\n            }\n            target.blur();\n        }\n    };\n\n    return (\n        <header className={timerId ? \"hidden\" : undefined}>\n            <a href=\".\" className=\"brand\">\n                typing-test\n            </a>\n            <div className=\"buttons\">\n                {Object.entries(options).map(([option, choices]) => (\n                    <div key={option} className={option}>\n                        {option}:\n                        {choices.map((choice: string) => (\n                            <button\n                                className=\"mini\"\n                                key={choice}\n                                data-option={option}\n                                value={choice}\n                                onClick={(e) => handleOptions(e)}>\n                                {choice}\n                            </button>\n                        ))}\n                    </div>\n                ))}\n            </div>\n\n        </header>\n    );\n}\n\n/*\n\n{animationProps ? (\n    <div\n        className={`animated-theme ${animationProps.theme}`}\n        style={{\n            top: animationProps.top,\n            left: animationProps.left,\n        }}\n        onAnimationEnd={() => setAnimationProps(null)}></div>\n) : null}\n*/"]},"metadata":{},"sourceType":"module"}