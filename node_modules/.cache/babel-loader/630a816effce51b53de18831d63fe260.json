{"ast":null,"code":"import { setTimerId, setWordList, timerSet } from \"store/actions\";\nimport { store } from \"store/store\";\nexport const resetTest = async () => {\n  const {\n    dispatch,\n    getState\n  } = store;\n  const {\n    time: {\n      timerId\n    },\n    preferences: {\n      timeLimit,\n      type\n    }\n  } = getState();\n  document.querySelectorAll(\".wrong, .right\").forEach(el => el.classList.remove(\"wrong\", \"right\"));\n\n  if (timerId) {\n    clearInterval(timerId);\n    dispatch(setTimerId(null));\n  }\n\n  import(`wordlists/${type}.json`).then(words => dispatch(setWordList(words.default)));\n  dispatch(timerSet(timeLimit));\n};","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/fast_typing/src/helpers/resetTest.ts"],"names":["setTimerId","setWordList","timerSet","store","resetTest","dispatch","getState","time","timerId","preferences","timeLimit","type","document","querySelectorAll","forEach","el","classList","remove","clearInterval","then","words","default"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,WAArB,EAAkCC,QAAlC,QAAkD,eAAlD;AACA,SAASC,KAAT,QAAsB,aAAtB;AAEA,OAAO,MAAMC,SAAS,GAAG,YAAY;AACjC,QAAM;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,MAAyBH,KAA/B;AACA,QAAM;AACFI,IAAAA,IAAI,EAAE;AAAEC,MAAAA;AAAF,KADJ;AAEFC,IAAAA,WAAW,EAAE;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb;AAFX,MAGFL,QAAQ,EAHZ;AAIAM,EAAAA,QAAQ,CACHC,gBADL,CACsB,gBADtB,EAEKC,OAFL,CAEcC,EAAD,IAAQA,EAAE,CAACC,SAAH,CAAaC,MAAb,CAAoB,OAApB,EAA6B,OAA7B,CAFrB;;AAGA,MAAIT,OAAJ,EAAa;AACTU,IAAAA,aAAa,CAACV,OAAD,CAAb;AACAH,IAAAA,QAAQ,CAACL,UAAU,CAAC,IAAD,CAAX,CAAR;AACH;;AACD,SAAQ,aAAYW,IAAK,OAAzB,EAAiCQ,IAAjC,CAAuCC,KAAD,IAClCf,QAAQ,CAACJ,WAAW,CAACmB,KAAK,CAACC,OAAP,CAAZ,CADZ;AAGAhB,EAAAA,QAAQ,CAACH,QAAQ,CAACQ,SAAD,CAAT,CAAR;AACH,CAjBM","sourcesContent":["import { setTimerId, setWordList, timerSet } from \"store/actions\";\nimport { store } from \"store/store\";\n\nexport const resetTest = async () => {\n    const { dispatch, getState } = store;\n    const {\n        time: { timerId },\n        preferences: { timeLimit, type },\n    } = getState();\n    document\n        .querySelectorAll(\".wrong, .right\")\n        .forEach((el) => el.classList.remove(\"wrong\", \"right\"));\n    if (timerId) {\n        clearInterval(timerId);\n        dispatch(setTimerId(null));\n    }\n    import(`wordlists/${type}.json`).then((words) =>\n        dispatch(setWordList(words.default))\n    );\n    dispatch(timerSet(timeLimit));\n};\n"]},"metadata":{},"sourceType":"module"}