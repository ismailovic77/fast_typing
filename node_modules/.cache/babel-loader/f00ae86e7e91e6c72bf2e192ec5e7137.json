{"ast":null,"code":"var _jsxFileName = \"/home/ismailyh/Desktop/project/typing-test/src/components/CommandPallet.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\nimport styles from \"stylesheets/CommandPallet.module.scss\";\nimport { options } from \"./Header\";\nimport { useDispatch } from \"react-redux\";\nimport { setTime, setTheme, setType } from \"store/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function CommandPallet(props) {\n  _s();\n\n  const [palletText, setPalletText] = useState(\"\");\n  const [selectedOption, setSelectedOption] = useState(\"\");\n  const [highlightedOption, setHighlightedOption] = useState(0);\n  const [commandList, setCommandList] = useState([]);\n  const dispatch = useDispatch();\n  const palletTextBox = useRef(null);\n  useEffect(() => {\n    document.onclick = () => {\n      props.setShowPallet(s => !s);\n      console.log(\"heere\");\n    };\n\n    return () => {\n      document.onclick = null;\n    };\n  }, [props]);\n  useEffect(() => {\n    if (!selectedOption) {\n      setCommandList(Object.keys(options).filter(option => option.includes(palletText.toLowerCase())));\n    } else {\n      const commands = options[selectedOption].map(o => o.toString());\n      setCommandList(commands.filter(option => option.includes(palletText.toLowerCase())));\n    }\n\n    setHighlightedOption(0);\n  }, [palletText, selectedOption]);\n\n  const handleCommandSelection = command => {\n    setPalletText(\"\");\n    if (!command) return;\n\n    if (!selectedOption) {\n      setSelectedOption(command);\n      return;\n    }\n\n    switch (selectedOption) {\n      case \"time\":\n        dispatch(setTime(+command));\n        break;\n\n      case \"theme\":\n        dispatch(setTheme(command));\n        break;\n\n      case \"type\":\n        dispatch(setType(command));\n        break;\n\n      default:\n        console.log(selectedOption, command);\n    }\n\n    props.setShowPallet(false);\n  };\n\n  const handlePalletKeys = e => {\n    if (e.key === \"ArrowUp\") {\n      setHighlightedOption(op => op > 0 ? op - 1 : op);\n    } else if (e.key === \"ArrowDown\") {\n      setHighlightedOption(op => op < commandList.length - 1 ? op + 1 : op);\n    } else if (e.key === \"Enter\") {\n      const command = commandList[highlightedOption];\n      handleCommandSelection(command);\n    } else if (e.key === \"Escape\") {\n      props.setShowPallet(false);\n    }\n\n    e.stopPropagation();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: styles.commandPallet,\n    onKeyDown: handlePalletKeys,\n    onClick: e => e.stopPropagation(),\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      ref: palletTextBox,\n      type: \"text\",\n      className: styles.commandInput,\n      placeholder: \"Type to search\",\n      value: palletText,\n      autoFocus: true,\n      onChange: e => setPalletText(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.commandList,\n      children: commandList.map((option, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `${styles.command} ${highlightedOption === idx && styles.highlighted}`,\n        onClick: () => handleCommandSelection(option),\n        children: option\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CommandPallet, \"KjassvwK+U1rju8iLhPQwPAYg8E=\", false, function () {\n  return [useDispatch];\n});\n\n_c = CommandPallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommandPallet\");","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/typing-test/src/components/CommandPallet.tsx"],"names":["useEffect","useState","useRef","styles","options","useDispatch","setTime","setTheme","setType","CommandPallet","props","palletText","setPalletText","selectedOption","setSelectedOption","highlightedOption","setHighlightedOption","commandList","setCommandList","dispatch","palletTextBox","document","onclick","setShowPallet","s","console","log","Object","keys","filter","option","includes","toLowerCase","commands","map","o","toString","handleCommandSelection","command","handlePalletKeys","e","key","op","length","stopPropagation","commandPallet","commandInput","target","value","idx","highlighted"],"mappings":"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","sourcesContent":["import { KeyboardEvent, useEffect, useState, useRef } from \"react\";\nimport styles from \"stylesheets/CommandPallet.module.scss\";\nimport { options, Options } from \"./Header\";\nimport { useDispatch } from \"react-redux\";\nimport { setTime, setTheme, setType } from \"store/actions\";\n\ninterface Props {\n    setShowPallet: Function;\n}\n\nexport default function CommandPallet(props: Props) {\n    const [palletText, setPalletText] = useState(\"\");\n    const [selectedOption, setSelectedOption] = useState(\"\");\n    const [highlightedOption, setHighlightedOption] = useState(0);\n    const [commandList, setCommandList] = useState<string[]>([]);\n    const dispatch = useDispatch();\n    const palletTextBox = useRef<HTMLInputElement>(null);\n\n    useEffect(() => {\n        document.onclick = () => {\n            props.setShowPallet((s: boolean) => !s);\n            console.log(\"heere\");\n        };\n        return () => {\n            document.onclick = null;\n        };\n    }, [props]);\n\n    useEffect(() => {\n        if (!selectedOption) {\n            setCommandList(\n                Object.keys(options).filter((option) =>\n                    option.includes(palletText.toLowerCase())\n                )\n            );\n        } else {\n            const commands: Array<string> = options[\n                selectedOption as keyof Options\n            ].map((o) => o.toString());\n            setCommandList(\n                commands.filter((option: string) =>\n                    option.includes(palletText.toLowerCase())\n                )\n            );\n        }\n        setHighlightedOption(0);\n    }, [palletText, selectedOption]);\n\n    const handleCommandSelection = (command: string) => {\n        setPalletText(\"\");\n        if (!command) return;\n        if (!selectedOption) {\n            setSelectedOption(command);\n            return;\n        }\n        switch (selectedOption) {\n            case \"time\":\n                dispatch(setTime(+command));\n                break;\n            case \"theme\":\n                dispatch(setTheme(command));\n                break;\n            case \"type\":\n                dispatch(setType(command));\n                break;\n            default:\n                console.log(selectedOption, command);\n        }\n        props.setShowPallet(false);\n    };\n\n    const handlePalletKeys = (e: KeyboardEvent) => {\n        if (e.key === \"ArrowUp\") {\n            setHighlightedOption((op) => (op > 0 ? op - 1 : op));\n        } else if (e.key === \"ArrowDown\") {\n            setHighlightedOption((op) =>\n                op < commandList.length - 1 ? op + 1 : op\n            );\n        } else if (e.key === \"Enter\") {\n            const command = commandList[highlightedOption];\n            handleCommandSelection(command);\n        } else if (e.key === \"Escape\") {\n            props.setShowPallet(false);\n        }\n        e.stopPropagation();\n    };\n\n    return (\n        <div\n            className={styles.commandPallet}\n            onKeyDown={handlePalletKeys}\n            onClick={(e) => e.stopPropagation()}>\n            <input\n                ref={palletTextBox}\n                type=\"text\"\n                className={styles.commandInput}\n                placeholder=\"Type to search\"\n                value={palletText}\n                autoFocus\n                onChange={(e) => setPalletText(e.target.value)}\n            />\n            <div className={styles.commandList}>\n                {commandList!.map((option, idx) => (\n                    <div\n                        className={`${styles.command} ${\n                            highlightedOption === idx && styles.highlighted\n                        }`}\n                        key={idx}\n                        onClick={() => handleCommandSelection(option)}>\n                        {option}\n                    </div>\n                ))}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}