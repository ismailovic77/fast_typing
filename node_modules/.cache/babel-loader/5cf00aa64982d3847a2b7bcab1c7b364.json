{"ast":null,"code":"var _jsxFileName = \"/home/ismailyh/Desktop/project/typing-test/src/components/Test.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRef, setCaretRef } from \"store/actions\";\nimport \"stylesheets/Test.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Test() {\n  _s();\n\n  const {\n    word: {\n      typedWord,\n      currWord,\n      wordList,\n      typedHistory\n    },\n    time: {\n      timer\n    }\n  } = useSelector(state => state);\n  const dispatch = useDispatch();\n  const extraLetters = typedWord.slice(currWord.length).split(\"\");\n  const activeWord = useRef(null);\n  const caretRef = useRef(null);\n  useEffect(() => {\n    dispatch(setRef(activeWord));\n    dispatch(setCaretRef(caretRef));\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"test\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"timer\",\n      children: timer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"box\",\n      children: wordList.map((word, idx) => {\n        const isActive = currWord === word && typedHistory.length === idx;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"word\",\n          ref: isActive ? activeWord : null,\n          children: [isActive ? /*#__PURE__*/_jsxDEV(\"span\", {\n            ref: caretRef,\n            id: \"caret\",\n            className: \"blink\",\n            style: {\n              left: typedWord.length * 14.5833\n            },\n            children: \"|\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 33\n          }, this) : null, word.split(\"\").map((char, charId) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              children: char\n            }, char + charId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 40\n            }, this);\n          }), isActive ? extraLetters.map((char, charId) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"wrong extra\",\n              children: char\n            }, char + charId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 43\n            }, this);\n          }) : typedHistory[idx] ? typedHistory[idx].slice(wordList[idx].length).split(\"\").map((char, charId) => {\n            return /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"wrong extra\",\n              children: char\n            }, char + charId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 47\n            }, this);\n          }) : null]\n        }, word + idx, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Test, \"vIuNJIbgx+j8beo3KIYuMdLfqlk=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = Test;\n\nvar _c;\n\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"sources":["/home/ismailyh/Desktop/project/typing-test/src/components/Test.tsx"],"names":["useEffect","useRef","useDispatch","useSelector","setRef","setCaretRef","Test","word","typedWord","currWord","wordList","typedHistory","time","timer","state","dispatch","extraLetters","slice","length","split","activeWord","caretRef","map","idx","isActive","left","char","charId"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setRef, setCaretRef } from \"store/actions\";\nimport { State } from \"store/reducer\";\nimport \"stylesheets/Test.scss\";\n\nexport default function Test() {\n    const {\n        word: { typedWord, currWord, wordList, typedHistory },\n        time: { timer },\n    } = useSelector((state: State) => state);\n    const dispatch = useDispatch();\n    const extraLetters = typedWord.slice(currWord.length).split(\"\");\n    const activeWord = useRef<HTMLDivElement>(null);\n    const caretRef = useRef<HTMLSpanElement>(null);\n\n    useEffect(() => {\n        dispatch(setRef(activeWord));\n        dispatch(setCaretRef(caretRef));\n    }, [dispatch]);\n\n    return (\n        <div className=\"test\">\n            <div className=\"timer\">{timer}</div>\n            <div className=\"box\">\n                {wordList.map((word, idx) => {\n                    const isActive = currWord === word && typedHistory.length === idx;\n                    return (\n                        <div\n                            key={word + idx}\n                            className=\"word\"\n                            ref={isActive ? activeWord : null}>\n                            {isActive ? (\n                                <span\n                                    ref={caretRef}\n                                    id=\"caret\"\n                                    className=\"blink\"\n                                    style={{\n                                        left: typedWord.length * 14.5833,\n                                    }}>\n                                    |\n                                </span>\n                            ) : null}\n                            {word.split(\"\").map((char, charId) => {\n                                return <span key={char + charId}>{char}</span>;\n                            })}\n                            {isActive\n                                ? extraLetters.map((char, charId) => {\n                                      return (\n                                          <span\n                                              key={char + charId}\n                                              className=\"wrong extra\">\n                                              {char}\n                                          </span>\n                                      );\n                                  })\n                                : typedHistory[idx]\n                                ? typedHistory[idx]\n                                      .slice(wordList[idx].length)\n                                      .split(\"\")\n                                      .map((char, charId) => {\n                                          return (\n                                              <span\n                                                  key={char + charId}\n                                                  className=\"wrong extra\">\n                                                  {char}\n                                              </span>\n                                          );\n                                      })\n                                : null}\n                        </div>\n                    );\n                })}\n            </div>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}